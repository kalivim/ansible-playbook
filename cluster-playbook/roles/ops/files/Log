#!/usr/bin/env python
# coding:utf8
#
#       The script is cat AllServer logs file for windows
#			by: catmint
#

import os, sys

ServerLog = "tailf /data/project/game-server/logs/all.log"
GatewayLog = "tailf /data/project/game-gateway/logs/all.log"  # java logs
FlumeLog = "tailf /data/bigdata/flume/apache-flume-1.6.0-bin/flume.log"
ZkLog = "tailf /data/software/zkserver/zookeeper-3.4.9/zookeeper.out"

HdfsBase = "tailf /data/bigdata/hadoop/hadoop-2.7.3/logs/"
NameFile = HdfsBase + "hadoop-root-namenode-ip-172-31-28-17.log"  # HDFS Logs dir
DataFile1 = HdfsBase + "hadoop-root-datanode-ip-172-31-28-187.log"
DataFile2 = HdfsBase + "hadoop-root-datanode-ip-172-31-26-122.log"

ServerIp = ["game-01", "game-02", "game-03"]
GatewayIp = ["gateway-01", "gateway-02", "gateway-03"]  # IPlist
ZkIP = ["zk-01", "zk-02", "zk-03"]
NameIp = ["hdfs-01"]
DataIp = ["hdfs-02", "hdfs-03"]
HdfsIp = NameIp + DataIp

global TailList

TailList = []


def Command(host):
    cmd = "multitail" + host
    #print cmdi					#DEBUG
    os.system(cmd)


def Remote(ip, file):
    host = " -l " + '"ssh ' + ip + " '" + file + "'" + '"'
    TailList.append(host)


def CatServer():
    for ip in ServerIp:
        Remote(ip, ServerLog)

def CatZK():
    for ip in ZkIP:
        Remote(ip, ZkLog)


def CatGateway():
    for ip in GatewayIp:
        Remote(ip, GatewayLog)


def CatFlume():
    for ip in HdfsIp:
        Remote(ip, FlumeLog)


def CatHdfs():
    # for nameip in NameIp:
    #     Remote(nameip, NameFile)
    Remote(NameIp[0], NameFile)
    Remote(DataIp[0], DataFile1)
    Remote(DataIp[1], DataFile2)


def help():
    print '''

    ./Logs.py flume          Flume日志
    ./Logs.py hdfs           查看hdfs日志
    ./Logs.py server         游戏服日志
    ./Logs.py gateway        网关服日志
    ./Logs.py zk	     Zookeeper


    '''


def main():
    try:
        choice = sys.argv[1]
    except:
	help()
	exit()
    if choice == "flume":
        CatFlume()
    elif choice == "server":
        CatServer()
    elif choice == "gateway":
        CatGateway()
    elif choice == "hdfs":
        CatHdfs()
    elif choice == "zk":
        CatZK()
    elif choice == "all":
	CatServer()
	CatGateway()
    else:
        help()
        exit()
    str_tail = "".join(TailList)
    Command(str_tail)
if __name__ == '__main__':
        main()

